# Required libraries for data 
rm(list = ls())
# install.packages("VIM")
# install.packages("naniar")
# install.packages("missMDA")
# install.packages("Amelia")
# install.packages("mice")
# install.packages("missForest")
# install.packages("FactoMineR")
# install.packages("tidyverse")
library(rminer)
library(dplyr)
library(ggplot2)
library(caret) 
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
library(e1071)
library(xgboost)
library(stringr)
require(partykit)
require(tree)
library(ISLR)
library(lubridate)
library(tm)
library(rms)
library(glmnet)
library(pROC)
library(doMC)
library(kernlab)
library(haven)
library(readr)
library(naniar)
#------------------------------------------------------------------------------------------
# Read Data 
# data = read_csv("New_Data.csv")
data<- read.csv(file.choose(),na.strings = c("","NA"),header = TRUE)
View(data)
str(data)
summary(data)

#--------------------------------------------------------------------------------------------------------------------------------------
#Let's take a look at the missing data 
p <- function(x){sum(is.na(x)/length(x)*100)}
apply(data,2,p)

tmp = sort(sapply(data, function(x) sum(length(which(is.na(x)))))/nrow(data),decreasing = TRUE)

# Drop features that have more than 50% missing and look at the ones that are still missing
discard_column = names(tmp[tmp>0.5])
data = (data[,!(names(data) %in% discard_column)])
tmp = sort(sapply(data, function(x) sum(length(which(is.na(x)))))/nrow(data),decreasing = TRUE)
tmp[tmp>0]
#Visualize the missing data
gg_miss_var(data)
## -----------------------------------------------------------------------------------------------------------------------------------
#Plot Missinh data 
tmp = tmp[tmp>0]
par(mfrow=c(2,3))
for(feature_name in names(tmp)){
  hist(data[[feature_name]],main = str_c(feature_name,"(missing=",100* round(as.numeric(
    tmp[feature_name]),2) ,"%)") )
}
#--------------------------------------------------------------------------------------------------------------------------------------
#Remove all NA's 
data1=data %>% na.omit()
data1<-data%>%mutate_all(~ifelse(.%in% c("N/A","null",""),NA,.))%>% na.omit()
View(data1)
str(data1)
summary(data1)
# attach(data1)
cor.data1 <- cor(data1)
corrplot(cor.data1, method = 'number')
#-------------------------------------------------------------------------------------------------------------------------------------
#let's remove the outliers in our variables 
#-------------------------------------------------------------------------------------------------------------------------------------
#plots of distribution 
ggplot(data1, aes(x = ltv))+ geom_histogram(aes(fill = as.factor(loan_default)),bins = 30) + facet_wrap(~loan_default, ncol = 1) + ggtitle("Distribution of Loan to Value and Loan Default")


#plots of distribution 
ggplot(data1, aes(x=as.factor(loan_default),y=ltv))+geom_boxplot()+ggtitle("Loan Default by Loan to Value")

#-------------------------------------------------------------------------------------------------------------------------------------
par(mfrow=c(2,2))
ggplot(data1,aes(y=asset_cost),main="AssetCost") + geom_boxplot(fill="blue") +ggtitle("Boxplot of AssetCost")
qnt <- quantile(data1$asset_cost, probs=c(.25, .75), na.rm = T)
caps <- quantile(data1$asset_cost, probs=c(.15, .85), na.rm = T)
H <- 1.5 * IQR(data1$asset_cost, na.rm = T)
data1$asset_cost[data1$asset_cost < (qnt[1] - H)] <- caps[1]
data1$asset_cost[data1$asset_cost > (qnt[2] + H)] <- caps[2]
ggplot(data1,aes(y=asset_cost),main="AssetCost") + geom_boxplot(fill="blue") +ggtitle("Boxplot of AssetCost")
boxplot(data1$asset_cost,main="asset_cost_Without.Outliers",col = c("orange"),border = "brown")

par(mfrow=c(2,2))
ggplot(data1,aes(y=asset_cost),main="AssetCost") + geom_boxplot(fill="blue") +ggtitle("Boxplot of AssetCost")
# boxplot(data1$asset_cost, main="AssetCost_Outliers",col = c("skyblue"),border = "brown")
data_clean <- data1$asset_cost
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
data_clean<-boxplot(data_clean,main="asset_cost_Without.Outliers",col = c("orange"),border = "brown")
ggplot(asset_cost,aes(y=asset_cost),main="AssetCost") + geom_boxplot(fill="blue") +ggtitle("Boxplot of AssetCost")

#-------------------------------------------------------------------------------------------------------------------------------------
qnt <- quantile(data1$ltv, probs=c(.25, .75), na.rm = T)
caps <- quantile(data1$ltv, probs=c(.15, .85), na.rm = T)
H <- 1.5 * IQR(data1$ltv, na.rm = T)
data1$ltv[data1$ltv < (qnt[1] - H)] <- caps[1]
data1$ltv[data1$ltv > (qnt[2] + H)] <- caps[2]
boxplot(data1$ltv,main="ltv_Without.Outliers",col = c("orange"),border = "brown")

par(mfrow=c(2,2))
boxplot(data1$ltv, main="LTV_With Outliers",col = c("skyblue"),border = "brown")
data_clean <- data1$ltv
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
boxplot(data_clean,main="ltv_Without.Outliers",col = c("orange"),border = "brown")
#------------------------------------------------------------------------------------------------------------------------------------
qnt <- quantile(data1$disbursed_amount, probs=c(.25, .75), na.rm = T)
caps <- quantile(data1$disbursed_amount, probs=c(.15, .85), na.rm = T)
H <- 1.5 * IQR(data1$disbursed_amount, na.rm = T)
data1$disbursed_amount[data1$disbursed_amount < (qnt[1] - H)] <- caps[1]
data1$disbursed_amount[data1$disbursed_amount > (qnt[2] + H)] <- caps[2]
boxplot(data1$disbursed_amount,main="disbursed_amount_Without.Outliers",col = c("orange"),border = "brown")

par(mfrow=c(2,2)) 
boxplot(data1$disbursed_amount, main="DisAmt_With Outliers",col = c("green"),border = "brown")
data_clean <- data1$disbursed_amount
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
boxplot(data_clean,main="disbursed_amount_Without.Outliers",col = c("orange"),border = "brown")

#-----------------------------------------------------------------------------------------------------------------------------------
qnt <- quantile(data1$PERFORM_CNS.SCORE, probs=c(.25, .75), na.rm = T)
caps <- quantile(data1$PERFORM_CNS.SCORE, probs=c(.15, .85), na.rm = T)
H <- 1.5 * IQR(data1$PERFORM_CNS.SCORE, na.rm = T)
data1$PERFORM_CNS.SCORE[data1$PERFORM_CNS.SCORE < (qnt[1] - H)] <- caps[1]
data1$PERFORM_CNS.SCORE[data1$PERFORM_CNS.SCORE > (qnt[2] + H)] <- caps[2]
boxplot(data1$PERFORM_CNS.SCORE,main="PERFORM_CNS.SCORE_Without.Outliers",col = c("orange"),border = "brown")

par(mfrow=c(2,2))
boxplot(data1$PERFORM_CNS.SCORE, main="Perf.CNSWith.Outliers",col = c("skyblue"),border = "brown")
data_clean <- data1$PERFORM_CNS.SCORE
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
boxplot(data_clean,main="PERFORM_CNS.SCORE_Without.Outliers",col = c("orange"),border = "brown")

#----------------------------------------------------------------------------------------------------------------------------------
qnt <- quantile(data1$PRI.SANCTIONED.AMOUNT, probs=c(.25, .75), na.rm = T)
caps <- quantile(data1$PRI.SANCTIONED.AMOUNT, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data1$PRI.SANCTIONED.AMOUNT, na.rm = T)
data1$PRI.SANCTIONED.AMOUNT[data1$PRI.SANCTIONED.AMOUNT < (qnt[1] - H)] <- caps[1]
data1$PRI.SANCTIONED.AMOUNT[data1$PRI.SANCTIONED.AMOUNT > (qnt[2] + H)] <- caps[2]
boxplot(data1$PRI.SANCTIONED.AMOUNT,main="PRI.SANCTIONED.AMOUNT_Without.Outliers",col = c("orange"),border = "brown")


par(mfrow=c(2,2))
boxplot(data1$PRI.SANCTIONED.AMOUNT, main="Pri.Sanc_With Outliers",col = c("skyblue"),border = "brown")
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
boxplot(data_clean,main="PRI.SANC_Without.Outliers",col = c("orange"),border = "brown")

#--------------------------------------------------------------------------------------------------------------
qnt <- quantile(data1$PRIMARY.INSTAL.AMT, probs=c(.35, .65), na.rm = T)
caps <- quantile(data1$PRIMARY.INSTAL.AMT, probs=c(.35, .65), na.rm = T)
H <- 1.5 * IQR(data1$PRIMARY.INSTAL.AMT, na.rm = T)
data1$PRIMARY.INSTAL.AMT[data1$PRIMARY.INSTAL.AMT < (qnt[1] - H)] <- caps[1]
data1$PRIMARY.INSTAL.AMT[data1$PRIMARY.INSTAL.AMT > (qnt[2] + H)] <- caps[2]
boxplot(data1$PRIMARY.INSTAL.AMT,main="PRIMARY.INSTAL.AMT_Without.Outliers",col = c("orange"),border = "brown")

par(mfrow=c(2,2))
boxplot(data1$PRIMARY.INSTAL.AMT, main="Prim.Inst.With Outliers",col = c("skyblue"),border = "brown")
data_clean <- data1$PRIMARY.INSTAL.AMT
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
boxplot(data_clean,main="PRIMARY.INSTAL.Without.Outliers",col = c("orange"),border = "brown")

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Histogram
#ggplot(data_clean, aes(x = data_clean1$asset_cost , fill = "skyblue")) + geom_bar(position = "fill")
par(mfrow=c(2,2))
# hist = ggplot(data = numeric_data, aes(x =Transportation.expense)) + 
#   ggtitle("Transportation.expense") + geom_histogram(bins = 25)
ggplot(asset_cost, aes(x=asset_cost)) + geom_histogram(fill="red",binwidth=1)+ggtitle("histogram of Asset_cost") 

hist(data1$asset_cost,freq=TRUE, main = "AssetCost_With_Outliers", breaks = 20,col = "red")
qplot(data = data1, x = asset_cost) + ylab("AssetCost")+xlim(c(0, 250000))

data_clean <- data1$asset_cost
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
hist(asset_cost,freq=TRUE, main = "AssetCost_without_Outliers", breaks = 20, col="green")

par(mfrow=c(2,2))
hist(data1$ltv,freq=TRUE, main = "LTV_With_Outliers", breaks = 20,col = "red")
data_clean <- data1$ltv
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
hist(ltv,freq=TRUE, main = "LTV_without_Outliers", breaks = 20, col="green")

par(mfrow=c(2,2)) 
hist(data1$disbursed_amount,freq=TRUE, main = "DisAmt_With_Outliers", breaks = 20,col = "red")
data_clean <- data1$disbursed_amount
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
hist(disbursed_amount,freq=TRUE, main = "DisAmt_without_Outliers", breaks = 20, col="green")


par(mfrow=c(2,2))
hist(data1$PRIMARY.INSTAL.AMT,freq=TRUE, main = "PRI.Inst_With_Outliers", breaks = 20,col = "red")
data_clean <- data1$PRIMARY.INSTAL.AMT
qnt <- quantile(data_clean, probs=c(.35, .65), na.rm = T)
caps <- quantile(data_clean, probs=c(.15, .85), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
hist(PRIMARY.INSTAL.AMT,freq=TRUE, main = "PRI.Inst_without_Outliers", breaks = 20, col="green")
summary(data$PRIMARY.INSTAL.AMT)

par(mfrow=c(2,2))
hist(data1$PRI.SANCTIONED.AMOUNT,freq=TRUE, main = "PRI.SANC_With_Outliers", breaks = 20,col = "red")
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
hist(PRI.SANCTIONED.AMOUNT,freq=TRUE, main = "PRI.SANC_without_Outliers", breaks = 20, col="green")

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#scatter plot
par(mfrow=c(2,2))
plot(data1$asset_cost,data1$disbursed_amount,col=c("blue","red"),main="AssetCost_DisbursedAmt_Outlier")
plot(log(data_clean$asset_cost),log(data_clean$disbursed_amount),col=c("blue","red"),main="AssetCost_DisbursedAmt")

par(mfrow=c(2,2))
plot(data1$asset_cost,data1$disbursed_amount,col=c("blue","red"),main="AssetCost_DisbursedAmt_Outlier")
data_clean <- data1$asset_cost
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
plot(log(asset_cost),log(disbursed_amount),col=c("blue","red"),main="AssetCost_DisbursedAmt")

par(mfrow=c(2,2))
plot(data1$disbursed_amount,data1$PRIMARY.INSTAL.AMT,col=c("blue","red"),main="DisAmt_PrimInst_Outlier")
plot(log(data_clean$disbursed_amount),log(data_clean$PRIMARY.INSTAL.AMT),col=c("blue","red"),main="DisAmt and PrimInst")

par(mfrow=c(2,2))
plot(data1$disbursed_amount,data1$PRIMARY.INSTAL.AMT,col=c("blue","red"),main="DisAmt_PrimInst_Outlier")
data_clean <- data1$PRIMARY.INSTAL.AMT
qnt <- quantile(data_clean, probs=c(.35, .65), na.rm = T)
caps <- quantile(data_clean, probs=c(.15, .85), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
plot(log(disbursed_amount),log(PRIMARY.INSTAL.AMT),col=c("blue","red"),main="DisAmt and PrimInst")

par(mfrow=c(2,2))
plot(data1$asset_cost,data1$ltv,col=c("blue","red"),main="LTV_AssetCost_Outlier")
plot(log(data_clean$asset_cost),log(data_clean$ltv),col=c("blue","red"),main="LTV_AssetCost")

par(mfrow=c(2,2))
plot(data1$asset_cost,data1$ltv,col=c("blue","red"),main="LTV_AssetCost_Outlier")
data_clean <- data1$ltv
qnt <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
caps <- quantile(data_clean, probs=c(.25, .75), na.rm = T)
H <- 1.5 * IQR(data_clean, na.rm = T)
data_clean[data_clean < (qnt[1] - H)] <- caps[1]
data_clean[data_clean > (qnt[2] + H)] <- caps[2]
plot(log(asset_cost),log(ltv),col=c("blue","red"),main="LTV_AssetCost")

par(mfrow=c(2,2))
plot(data1$PERFORM_CNS.SCORE,data1$PRIMARY.INSTAL.AMT,col=c("blue","red"),main="With_Outliers")
plot(log(data_clean$PERFORM_CNS.SCORE),log(data_clean$PRIMARY.INSTAL.AMT),col=c("blue","red"),main="Without_Outliers")

par(mfrow=c(2,2))
plot(data1$PRI.SANCTIONED.AMOUNT,data1$asset_cost,col=c("blue","red"),main="With_Outliers")
plot(log(data_clean$PRI.SANCTIONED.AMOUNT),log(data_clean$asset_cost),col=c("blue","red"),main="Without_Outliers")

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ECDfs
par(mfrow=c(2,2))
plot(ecdf(data1$asset_cost),do.points=TRUE,verticals = TRUE) # points are visible on the plot.
par(pty="s")
qqnorm(data1$asset_cost, pch=1, frame=FALSE)
qqline(data1$asset_cost, col="green", lwd=2) # adding the line on the Q-Q plot
library("car")
qqPlot(data1$asset_cost)

par(mfrow=c(2,2))
plot(ecdf(data_clean$asset_cost),do.points=TRUE,verticals = TRUE) # points are visible on the plot.
par(pty="s")
qqnorm(data_clean$asset_cost, pch=1, frame=FALSE)
qqline(data_clean$asset_cost, col="green", lwd=2) # adding the line on the Q-Q plot
library("car")
qqPlot(data_clean$asset_cost)
#------------------------------------------------------------------------------------------------------------------------------------------------------------------
par(mfrow=c(2,2))
plot(ecdf(data1$ltv),do.points=TRUE,verticals = TRUE) # points are visible on the plot.
par(pty="s")
qqnorm(data1$ltv, pch=1, frame=FALSE)
qqline(data1$ltv, col="green", lwd=2) # adding the line on the Q-Q plot
library("car")
qqPlot(data1$ltv)

par(mfrow=c(2,2))
plot(ecdf(data_clean$ltv),do.points=TRUE,verticals = TRUE) # points are visible on the plot.
par(pty="s")
qqnorm(data_clean$ltv, pch=1, frame=FALSE)
qqline(data_clean$ltv, col="green", lwd=2) # adding the line on the Q-Q plot
library("car")
qqPlot(data_clean$ltv)
#-------------------------------------------------------------------------------------------------------------------------------------------------------------
par(mfrow=c(2,2))
plot(ecdf(data1$disbursed_amount),do.points=TRUE,verticals = TRUE) # points are visible on the plot.
par(pty="s")
qqnorm(data1$disbursed_amount, pch=1, frame=FALSE)
qqline(data1$disbursed_amount, col="green", lwd=2) # adding the line on the Q-Q plot
library("car")
qqPlot(data1$disbursed_amount)

par(mfrow=c(2,2))
plot(ecdf(data_clean$disbursed_amount),do.points=TRUE,verticals = TRUE) # points are visible on the plot.
par(pty="s")
qqnorm(data_clean$disbursed_amount, pch=1, frame=FALSE)
qqline(data_clean$disbursed_amount, col="green", lwd=2) # adding the line on the Q-Q plot
library("car")
qqPlot(data_clean$disbursed_amount)

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------
par(mfrow=c(2,2))
plot(ecdf(data1$PRIMARY.INSTAL.AMT),do.points=TRUE,verticals = TRUE) # points are visible on the plot.
par(pty="s")
qqnorm(data1$PRIMARY.INSTAL.AMT, pch=1, frame=FALSE)
qqline(data1$PRIMARY.INSTAL.AMT, col="green", lwd=2) # adding the line on the Q-Q plot
library("car")
qqPlot(data1$PRIMARY.INSTAL.AMT)

par(mfrow=c(2,2))
plot(ecdf(data_clean$PRIMARY.INSTAL.AMT),do.points=TRUE,verticals = TRUE) # points are visible on the plot.
par(pty="s")
qqnorm(data_clean$PRIMARY.INSTAL.AMT, pch=1, frame=FALSE)
qqline(data_clean$PRIMARY.INSTAL.AMT, col="green", lwd=2) # adding the line on the Q-Q plot
library("car")
qqPlot(data_clean$PRIMARY.INSTAL.AMT)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#data Frame 
asset_cost<- c(data1$asset_cost)
disbursed_amount<- c(data1$disbursed_amount)
ltv<- c(data1$ltv)
branch_id<-c(data1$branch_id)
Employment.Type<- c(data1$Employment.Type)
State_ID<- c(data1$State_ID)
PERFORM_CNS.SCORE<- c(data1$PERFORM_CNS.SCORE)
PRIMARY.INSTAL.AMT<- c(data1$PRIMARY.INSTAL.AMT)
PRI.SANCTIONED.AMOUNT<- c(data1$PRI.SANCTIONED.AMOUNT)
PRI.DISBURSED.AMOUNT<- c(data1$PRI.DISBURSED.AMOUNT)
DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS<-c(data1$DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS)
NEW.ACCTS.IN.LAST.SIX.MONTHS<-c(data1$NEW.ACCTS.IN.LAST.SIX.MONTHS)
loan_default<- c(data1$loan_default)

newdata<- cbind.data.frame(data1$asset_cost,data1$disbursed_amount,data1$ltv,data1$branch_id,data1$Employment.Type,data1$State_ID,data1$PERFORM_CNS.SCORE,data1$PRIMARY.INSTAL.AMT,
                           data1$PRI.SANCTIONED.AMOUNT,data1$PRI.DISBURSED.AMOUNT,data1$DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS,data1$NEW.ACCTS.IN.LAST.SIX.MONTHS,data1$loan_default)
colnames(newdata)<- c("asset_cost","disbursed_amount","ltv","branch_id","Employment.Type","State_ID","PERFORM_CNS.SCORE","PRIMARY.INSTAL.AMT","PRI.SANCTIONED.AMOUNT","PRI.DISBURSED.AMOUNT",
                      "DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS","NEW.ACCTS.IN.LAST.SIX.MONTHS","loan_default")
newdata=newdata %>% na.omit()
View(newdata)
summary(newdata)
str(newdata)
pairs(newdata)
#Data Manipulation
newdata$disbursed_amount<- NULL 
newdata$asset_cost<-as.numeric(gsub(",","", newdata$asset_cost))
newdata$Employment.Type<- as.factor(gsub("[^]:digit:]]","",newdata$Employment.Type))
newdata$branch_id<- as.numeric(gsub("[^]:digit:]]","",newdata$branch_id))
newdata$State_ID<- as.numeric(gsub("[^]:digit:]]","",newdata$State_ID))
newdata$PERFORM_CNS.SCORE<- as.numeric(gsub("[^]:digit:]]","",newdata$PERFORM_CNS.SCORE))
newdata$PRIMARY.INSTAL.AMT<- as.numeric(gsub("[^]:digit:]]","",newdata$PRIMARY.INSTAL.AMT))
newdata$PRI.SANCTIONED.AMOUNT<-as.numeric(gsub("[^]:digit:]]","",newdata$PRI.SANCTIONED.AMOUNT))
newdata$PRI.DISBURSED.AMOUNT<- as.numeric(gsub("[^]:digit:]]","",newdata$PRI.DISBURSED.AMOUNT))
newdata$DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS<- as.numeric(gsub("[^]:digit:]]","",newdata$DELINQUENT.ACCTS.IN.LAST.SIX.MONTHS))
newdata$NEW.ACCTS.IN.LAST.SIX.MONTHS<- as.numeric(gsub("[^]:digit:]]","",newdata$NEW.ACCTS.IN.LAST.SIX.MONTHS))
newdata$loan_default<- as.factor(gsub("[^]:digit:]]","",newdata$loan_default))
attach(newdata)
str(newdata)
View(newdata)
summary(newdata)
# #-----------------------------------------------------------------------------------------------------------------------------------------------------
#corrplot newdata 
par(mfrow = c(1,1))
cor.newdata <- cor(newdata)
corrplot(cor.newdata, method = 'number')
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#correlation plot
corrplot(cor(newdata[getNumericColumns(newdata)],use="na.or.complete"))
gg_miss_var(newdata)
require(rpart.plot)
library(tree)
require(party)
matrixplot(newdata, sortby = 2)
LD_part1 <-ctree(loan_default ~.,data=newdata)
plot(LD_part1,main="Ctree")

#Scatter Plot 
par(mfrow = c(4,3))
for (i in c(1:11)) {
  plot(newdata[, i], jitter(newdata[, "loan_default"]), xlab = names(newdata)[i],
       ylab = "loan_default", col = "firebrick", cex = 0.8, cex.lab = 1.3)
  abline(lm(newdata[, "loan_default"] ~ newdata[ ,i]), lty = 2, lwd = 2)
}
par(mfrow = c(1, 1))

#remove outliers from data 
index.outliers1<- which(newdata$disbursed_amount > 47000  | newdata$disbursed_amount < 61000)
newdata<- newdata[-index.outliers1,]          

index.outliers2<- which(newdata$PRIMARY.INSTAL.AMT < 20000)
newdata<- newdata[-index.outliers2,]

index.outliers3<- which(newdata$PRI.SANCTIONED.AMOUNT > 64000000| newdata$PRI.SANCTIONED.AMOUNT < 100000000)
newdata<- newdata[-index.outliers3,]

index.outliers4<- which(newdata$PERFORM_CNS.SCORE > 300 | newdata$PERFORM_CNS.SCORE < 900)
newdata<- newdata[-index.outliers4,]

index.outliers5<- which(newdata$asset_cost >65000 | newdata$asset_cost > 80000)
newdata<- newdata[-index.outliers5,]
# qplot(data = my_data, x = num_students_total_gender.num_students_female) + ylab("Number of Schools")
# qplot(data = my_data, x = num_students_total_gender.num_students_female) + ylab("Number of Schools") + 
#   xlim(c(0, 1500))
#######################################################################################################################################################################################################

# Model Building
set.seed(1232)
train<- sample(nrow(newdata),0.8*nrow(newdata),replace = FALSE)
TrainSet <- newdata[train,]
Test<- newdata[-train,]
summary(TrainSet)
str(TrainSet)
summary(Test)
str(Test)
View(TrainSet)
#################################################################################################################################################################
#Logistic regression------------------------------------------------------------------------------------------------------------------------------------
model<- glm(loan_default~.,family = "binomial",data = TrainSet)
model
summary(model)
plot(resid(model))

#Final Model for logistic Regression 
Final_Model <- glm(loan_default ~ log(asset_cost)+ log(ltv)+ log(branch_id)+ Employment.Type+PERFORM_CNS.SCORE+log(State_ID),family = "binomial",data = TrainSet)
Final_Model
summary(Final_Model)

par(mfrow=c(2,2))
plot(Final_Model)
plot(resid(Final_Model))

#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Predict Probability of default using our model 
Test[1,]
summary(Test)
# predictions 
predict_mdl<- predict(Final_Model,newdata = Test[1,],type="response")
predict_mdl

Test[2,]
# predictions 
predict_mdl<- predict(Final_Model,newdata = Test[2,],type="response")
predict_mdl

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Checking for the Accuracy of the model 
predictions_all<- predict(model, newdata= Test, type="response") # let's predict all customer default 
head(predictions_all)

#set cutofflevel to 1
cutoff<- 0.25
predict_cutoff_0 <- ifelse(predictions_all > cutoff,1,0)
table(Test$loan_default,predict_cutoff_0)

# model accuracy
model_accuracy<- sum(diag(table))/sum(table)
model_accuracy
#misclassification
missclassification_rate <- 1- model_accuracy
missclassification_rate

#plot ROC
rocCurve<- roc(response=Test$loan_default,predictor = predict_cutoff_0)
aucCurve<- auc(rocCurve)
plot(rocCurve,legacy.axes = TRUE,print.auc = TRUE,col="violetred1",main="ROC.log")

####################################################################################################################################################################
#Random Forest------------------------------------------------------------------------------------------------------------------------------------------------------
#Final Model for logistic Regression 
set.seed(300)
cart.train<- TrainSet %>% na.omit()
cart.test<- Test%>%na.omit()
tr.ctrl<-trainControl(method = "cv",number = 10)
rf.ld<- randomForest(formula=loan_default~.,data=cart.train,importance=TRUE,method="rf", trControl=tr.ctrl,mtry=3,preProcess=c("center","scale"))
rf.ld
plot(rf.ld)
#predict
rf.ld.predict<- predict(rf.ld,newdata=Test)
rf.ld.predict
version(pkg = "caret")
downl
#confusion matrix
confusionMatrix(rf.ld.predict,Test$loan_default)

#important variables 
randomForest::importance(rf.ld)
varImpPlot(rf.ld)
## Important variables according to the model
varImpPlot(rf.ld,main="Variable Importance")

#new random forest model 
rf.ld1<- randomForest(formula=loan_default~ ltv+PERFORM_CNS.SCORE+asset_cost ,data=cart.train,importance=TRUE,method="rf", trControl=tr.ctrl,mtry=3,preProcess=c("center","scale"))
rf.ld1
rf.ld1.predict<- predict(rf.ld1,newdata=Test)
rf.ld1.predict

#confusion matrix
confusionMatrix(rf.ld1.predict,Test$loan_default)
#error rate
err<-rf.ld$err.rate                   
head(err)
oob_err<-err[nrow(err),"OOB"]
print(oob_err)
print(rf.ld)
plot(oob_err)
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Checking for the Accuracy of the model 
rf.ld.pred<- predict(rf.ld,newdata=Test,type="prob")
rf.ld.
# the estimated accuracy of the model 
accuracy1<- postResample(rf.ld,Test$loan_default)
accuracy1pred

#plot ROC
rocCurve.rf<- roc(Test$loan_default,rf.ld.pred[,2])
aucCurve<- auc(rocCurve)
plot(rocCurve,legacy.axes = TRUE,print.auc = TRUE,col="seagreen1",main="ROC.rf")

############################################################################################################################################################################
#Decision Tree------------------------------------------------------------------------------------------------------------------
# library(caret)
# library(rpart)
# library(rpart.plot)
# library(randomForest)
colSums(is.na(newdata))
table(loan_default)
prop.table(table(loan_default))
r.ctrl<- rpart.control(minsplit=100,minibucket=10, cp=0,xval=10)

# data1=data %>% na.omit()
cart.train<- TrainSet %>% na.omit()
names(cart.train)
m1<- rpart(formula = loan_default~.,data=cart.train[,-c(1,11)],method = "class",control = r.ctrl)
library(rattle) 
library(RColorBrewer)
fancyRpartPlot(m1) 
printcp(m1)
plotcp(m1)
tree_min<- m1$cptable[which.min(m1$cptable[,"xerror"]),"CP"] #prune the tree
ptree<- prune(m1,cp=tree_min)
printcp(ptree)
fancyRpartPlot(ptree, uniform = TRUE, main = "Final Tree",palettes = c("Blues", "Oranges"))
prediction1<- predict(m1,Test,type="class")

# we estimate the performance of the model the validation dataset
#confusion matrix
confusionMatrix(prediction1,Test$loan_default)

# the estimated accuracy of the model 
accuracy1<- postResample(prediction1,Test$loan_default)
accuracy1

#Checking for the Accuracy of the model 
decs.pred<- predict(m1,newdata=Test,type="prob")
decs.pred

#plot ROC
rocCurve.decs<- roc(Test$loan_default,decs.pred[,2])
aucCurve<- auc(rocCurve)
plot(rocCurve,legacy.axes = TRUE,print.auc = TRUE,col="lightcoral",main="ROC.DEC")

######################################################################################################################################################################################












